"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.popPath = popPath;
exports.resolveNodeNoSideEffects = resolveNodeNoSideEffects;
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _path = require("path");

var _url = require("url");

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _error = _interopRequireWildcard(require("./error"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function pushPath(ctx, filePath, docPath) {
  ctx.pathStack.push({
    path: ctx.path,
    file: ctx.filePath,
    document: ctx.document,
    source: ctx.source
  });
  ctx.path = docPath;
  ctx.filePath = filePath;
}

function decodePointerComponent(component) {
  return component.replace(/~1/, '/').replace(/~0/g, '~');
}

function popPath(ctx) {
  const topPath = ctx.pathStack.pop();
  ctx.path = topPath.path;
  ctx.filePath = topPath.file;
  ctx.source = topPath.source;
  ctx.document = topPath.document;
}
/**
 *
 * Here we go over each of the steps in the link and try to retreive the value
 * for it. If failed (e.g. because of undefined value) -- return null, to indicate that such
 * reference does not exist.
 *
 * TODO: we might need a feature to support validation of "URL" based definitions in the future, so
 * would be nice to have opportunity to call resolve() with empty ctx.
 *
 * TODO: add per-file/per-url cache
 *
 * @param {string} link A path in the yaml document which is to be resolved
 * @param {*} ctx JSON Object with the document field which represents the YAML structure
 */


async function resolve(link, ctx, visited = []) {
  const linkSplitted = link.split('#/');
  if (linkSplitted[0] === '') linkSplitted[0] = ctx.filePath;
  const [filePath, docPath] = linkSplitted;
  const resolvedFilePath = (0, _utils.isFullyQualifiedUrl)(ctx.filePath) || (0, _utils.isFullyQualifiedUrl)(filePath) ? (0, _url.resolve)(ctx.filePath, filePath) : (0, _path.resolve)((0, _path.dirname)(ctx.filePath), filePath);
  let document;
  let source;
  const isCurrentDocument = resolvedFilePath === ctx.filePath;
  pushPath(ctx, resolvedFilePath, []);
  const resolvedLink = `${resolvedFilePath}#/${docPath}`;

  if (!isCurrentDocument) {
    if (ctx.resolveCache[resolvedFilePath]) {
      ({
        source,
        document
      } = ctx.resolveCache[resolvedFilePath]);
    } else if (_fs.default.existsSync(resolvedFilePath)) {
      ctx.fileDependencies.add(resolvedFilePath); // FIXME: if refernced e.g. md file, no need to parse

      source = _fs.default.readFileSync(resolvedFilePath, 'utf-8');

      try {
        document = _jsYaml.default.safeLoad(source);
      } catch (e) {
        ctx.result.push((0, _error.createYAMLParseError)(e, ctx, resolvedFilePath));
        return {
          node: undefined
        };
      }
    } else if ((0, _utils.isFullyQualifiedUrl)(resolvedFilePath)) {
      try {
        const headers = {};

        for (let i = 0; i < ctx.headers.length; i++) {
          if ((0, _utils.match)(resolvedFilePath, ctx.headers[i].matches)) {
            headers[ctx.headers[i].name] = ctx.headers[i].value;
          }
        }

        const req = await (0, _nodeFetch.default)(resolvedFilePath, {
          headers
        });

        if (!req.ok) {
          return {
            node: undefined
          };
        }

        const text = await req.text();

        try {
          source = text;
          document = _jsYaml.default.safeLoad(text);
        } catch (e) {
          ctx.result.push((0, _error.createYAMLParseError)(e, ctx, resolvedFilePath));
          return {
            node: undefined
          };
        }
      } catch (e) {
        // FIXME: lost yaml parsing errors and network errors here
        return {
          node: undefined
        };
      }
    } else {
      return {
        node: undefined
      };
    }
  } else {
    document = ctx.document;
    source = ctx.source;
  }

  if (source) ctx.resolveCache[resolvedFilePath] = {
    source,
    document
  };
  ctx.source = source;
  ctx.document = document;
  const docPathSteps = docPath ? docPath.split('/').filter(el => el !== '').reverse() : [];
  let target = document;
  let circular;
  let transitiveResolvesOnStack = 0;
  let transitiveError;

  if (visited.indexOf(resolvedLink) > -1) {
    target = undefined;
    circular = true;
  }

  visited.push(resolvedLink);

  while (target !== undefined) {
    if (target && target.$ref) {
      // handle transitive $ref's
      const resolved = await resolve(target.$ref, ctx, visited);
      transitiveError = resolved.transitiveError;

      if (resolved.node === undefined && !transitiveError) {
        // We want to show only the error for the first $ref that can't be resolved.
        // So we create it on the current stack and propagate it out as a transitiveError
        popPath(ctx);
        ctx.path.push('$ref');
        const message = resolved.circular ? 'Circular reference.' : 'Reference does not exist.';
        transitiveError = (0, _error.default)(message, target, ctx, {
          fromRule: 'resolve-ref'
        });
        ctx.path.pop();
        target = undefined;
        break;
      }

      target = resolved.node;
      transitiveResolvesOnStack++;
    }

    let step = docPathSteps.pop();
    if (!step) break;
    step = decodePointerComponent(step);
    target = target && target[step] !== undefined ? target[step] : undefined;
    ctx.path.push(step);
  }

  for (let i = 0; i < transitiveResolvesOnStack; ++i) {
    // keep current file context and remove indirection records
    ctx.pathStack.pop();
  }

  if (transitiveError) {
    // recalc referencedFrom after exiting transitive ref stack to show original $ref in the error
    transitiveError.referencedFrom = (0, _error.getReferencedFrom)(ctx);
  }

  return {
    node: target,
    transitiveError,
    circular
  };
}
/*
 * This function is used to resolve $ref fields inside the node. Currently supports links:
 * - inside the file
 * - to the another file in local file system
 * - http(s) links to other files
 *
 * $ref field value must be a valid OpenAPI link
 * (e.g. another/dir/file.yaml#/components/schemas/Example)
 *
 * @param {*} node
 * @param {*} ctx
 */


async function resolveNode(node, ctx) {
  if (!node || typeof node !== 'object') return {
    node
  };

  if (node.$ref) {
    const resolved = await resolve(node.$ref, ctx);

    if (resolved.node === undefined) {
      // can't resolve
      popPath(ctx);
      ctx.path.push('$ref');
      const error = resolved.transitiveError ? resolved.transitiveError : (0, _error.default)('Reference does not exist.', node, ctx, {
        fromRule: 'resolve-ref'
      });
      ctx.path.pop();
      ctx.result.push(error);
      return {
        node
      };
    }

    return {
      node: resolved.node,
      onStack: true
    };
  }

  return {
    node
  };
} // to be used in mutators


async function resolveNodeNoSideEffects(node, ctx) {
  const ctxCopy = { ...ctx,
    pathStack: ctx.pathStack.slice()
  };
  return resolveNode(node, ctxCopy);
}

var _default = resolveNode;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,